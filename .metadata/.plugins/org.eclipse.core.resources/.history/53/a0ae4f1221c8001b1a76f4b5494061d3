package com.adp.assignment.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.adp.assignment.model.Requirements;
import com.adp.assignment.service.BillExchangeSystemService;


@RestController
@RequestMapping("/count-coins")
public class BillExchangeSystemController {
	
	@Autowired
	private BillExchangeSystemService exchangeService;

	@GetMapping("/bill-least")
	public String calculateLeastNumberOfCoinsRequiredForAmount(int amount) {
		
		try {
			return exchangeService.calculateLeastNumberOfCoinsRequiredForAmountService(amount);
		}
		catch(Exception e) {
			System.out.println("tetststststststs");
			return "Please enter numeric values only";
		}
	}

	@GetMapping("/bill-most")
	public ResponseEntity calculateMostNumberOfCoinsRequiredForAmount(@RequestBody Requirements requirements) {

		double amount = requirements.getAmount();

		double[] notes = { 0.01, 0.05, 0.10, 0.25 };

		double[] noteCounter = { 0, 0, 0, 0 };

		int[] limit = { requirements.getLimit1(), requirements.getLimit2(), requirements.getLimit3(), requirements.getLimit4() };

		double initialAmount = amount;

		for (int i = 0; i < 4; i++) {

			if (amount >= notes[i]) {
				if (limit[i] * notes[i] > amount) {
					noteCounter[i] = amount / notes[i];
					amount = amount - noteCounter[i] * notes[i];
				} else {
					var temp = amount - (notes[i] * limit[i]);

					noteCounter[i] = (notes[i] * limit[i]) / notes[i];
					amount = amount - (notes[i] * limit[i]);
				}
			}

		}

		double sum = 0;
		double mostNumberOfCoins = 0;

		for (var i = 0; i < 4; i++) {
			if (noteCounter[i] > 0) {
				sum = sum + (notes[i] * noteCounter[i]);
			}
			mostNumberOfCoins = mostNumberOfCoins + noteCounter[i];
		}

		if (sum == initialAmount) {
			System.out.println("Success = " + mostNumberOfCoins);
		} else {
			System.out.println("Machine does not have enough coins = ");
		}
		
		return ResponseEntity.ok((int)mostNumberOfCoins);
	}

}
